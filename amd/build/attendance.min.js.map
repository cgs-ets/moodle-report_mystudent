{"version":3,"file":"attendance.min.js","sources":["../src/attendance.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * @package   report_mystudent\n * @copyright 2022 Veronica Bermegui\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'core/ajax', 'core/log', 'report_mystudent/chart'], function ($, Ajax, Log, Chart) {\n    'use strict';\n\n    function init(origin) {\n        Log.debug(\"mystudent: attendance report : initialising controls\");\n        var control = new AttendanceControl(origin);\n        control.main(origin);\n    }\n\n    /**\n     * AttendanceControl a single block_assignmentsquizzes_report block instance contents.\n     *\n     * @constructor\n     */\n    function AttendanceControl(origin) {\n        let self = this;\n\n        if (origin != 'dashboard') {\n            const element = document.getElementById('rollmarking-container');\n            const username = element.getAttribute('data-username');\n            const campus = element.getAttribute('data-campus');\n            self.username = username;\n            self.campus = campus;\n        }\n    }\n\n    /**\n     * Run the controller.\n     *\n     */\n    AttendanceControl.prototype.main = function (origin) {\n        let self = this;\n        if (origin != 'dashboard') {\n            self.setupEvents();\n        } else {\n            self.getAttendanceChart();\n        }\n\n    };\n\n    AttendanceControl.prototype.setupEvents = function () {\n        let self = this;\n\n        $('.attendance-rollmarking').on('custom.getAttendanceRollmarking', function () {\n            self.getAttendanceRollmarking();\n        });\n\n        $('.attendance-rollmarking').click(function () {\n            $(this).trigger(\"custom.getAttendanceRollmarking\");\n        });\n    };\n\n    AttendanceControl.prototype.getAttendanceRollmarking = function () {\n        let self = this;\n        const username = self.username;\n        const campus = self.campus;\n\n        // Add spinner.\n        $('#attendance-based-on-rollmarking-table').removeAttr('hidden');\n        $('#attendance-based-on-rollmarking-show').toggle(); // Carret down.\n        $('#attendance-based-on-rollmarking-hide').toggle(); // Carret right\n\n        Ajax.call([{\n            methodname: 'report_mystudent_get_attendance_rollmarking_context',\n            args: {\n                username: username,\n                campus: campus\n            },\n\n            done: function (response) {\n                const htmlResult = response.html;\n\n                $('#attendance-based-on-rollmarking-table').attr('hidden', true);\n                $('[data-region=\"attendance-rollmarking\"]').replaceWith(htmlResult);\n            },\n\n            fail: function (reason) {\n                Log.error('block_attendance_report_get_attendance_rollmarking_context: Unable to get context.');\n                Log.debug(reason);\n                $('[data-region=\"attendance-rollmarking\"]').replaceWith('<p class=\"alert alert-danger\">Data not available. Please try later</p>');\n            }\n        }]);\n\n    };\n\n    AttendanceControl.prototype.getAttendanceChart = function () {\n        const self = this;\n        const userid = document.querySelector('.card-deck').getAttribute('data-userid')\n        const campus = document.querySelector('[data-campus]').getAttribute('data-campus');\n\n        // document.getElementById('chart-attendance').nextElementSibling.removeAttribute('hidden');\n        document.querySelector('.card-img-attendance').firstElementChild.style.display = \"flex\";\n\n\n        Ajax.call([{\n            methodname: 'report_mystudent_get_attendance_by_term',\n            args: {\n                userid: userid,\n                campus: campus\n            },\n\n            done: function (response) {\n                const htmlResult = response.result;\n                Log.debug(htmlResult);\n                Log.debug(self);\n                self.renderAttendanceBarChar(htmlResult);\n\n            },\n\n            fail: function (reason) {\n                Log.debug(reason);\n                // remove spinner\n                //document.querySelector('.card-body-attendance').firstElementChild.style.display = \"none\";\n                document.querySelector('.card-img-attendance').firstElementChild.style.display = \"none\";\n                $('#card-body-attendance-info-text').replaceWith('<p class=\"card-text alert alert-danger\" id =\"card-body-attendance-info-text\" >Data not available. Please try later</p>');\n            }\n        }]);\n\n    }\n\n    AttendanceControl.prototype.renderAttendanceBarChar = function (results) {\n        const ctx = document.getElementById(\"chart-attendance\");\n\n        if (!ctx) {\n            return;\n        }\n\n        const result = JSON.parse(results);\n        const data = [];\n        const labels = [];\n\n        for (let i = 0; i < result.length; i++) {\n\n            labels.push(`Term ${result[i].filesemester}`);\n            data.push(result[i].totalpercentageattended);\n           \n        }\n\n        const config = {\n            type: 'bar',\n            data: {\n                labels: labels,\n                datasets: [{\n                    label: 'Term',\n                    tension: 0.4,\n                    borderWidth: 0,\n                    borderRadius: 4,\n                    borderSkipped: false,\n                    borderColor: '#ffc93c',\n                    backgroundColor: '#ffc93c',\n                    data: data,\n                    maxBarThickness: 6\n                }]\n\n            },\n            options: {\n                responsive: true,\n                maintainAspectRatio: false,\n                scales: {\n                    y: {\n                        suggestedMax: 100,\n                        min: 1,\n                    }\n                },\n                plugins: {\n                    tooltip: {\n                        callbacks: {\n                            label: function (context) {\n                                Y.log(context);\n                                return `${context.parsed.y} %`\n                            },\n                        }\n                    },\n                },\n            },\n        };\n\n        // remove spinner\n    //    document.querySelector('.card-body-attendance').firstElementChild.style.display = \"none\";\n       document.querySelector('.card-img-attendance').firstElementChild.style.display = \"none\";\n        const myChart = new Chart(ctx, config);\n    }\n\n\n\n\n    return {\n        init: init\n    }\n});"],"names":["define","$","Ajax","Log","Chart","AttendanceControl","origin","element","document","getElementById","username","getAttribute","campus","this","prototype","main","setupEvents","getAttendanceChart","self","on","getAttendanceRollmarking","click","trigger","removeAttr","toggle","call","methodname","args","done","response","htmlResult","html","attr","replaceWith","fail","reason","error","debug","userid","querySelector","firstElementChild","style","display","result","renderAttendanceBarChar","results","ctx","JSON","parse","data","labels","i","length","push","filesemester","totalpercentageattended","config","type","datasets","label","tension","borderWidth","borderRadius","borderSkipped","borderColor","backgroundColor","maxBarThickness","options","responsive","maintainAspectRatio","scales","y","suggestedMax","min","plugins","tooltip","callbacks","context","Y","log","parsed","init"],"mappings":";;;;;AAsBAA,qCAAO,CAAC,SAAU,YAAa,WAAY,2BAA2B,SAAUC,EAAGC,KAAMC,IAAKC,gBAcjFC,kBAAkBC,WAGT,aAAVA,OAAuB,KACjBC,QAAUC,SAASC,eAAe,yBAClCC,SAAWH,QAAQI,aAAa,iBAChCC,OAASL,QAAQI,aAAa,eAL7BE,KAMFH,SAAWA,SANTG,KAOFD,OAASA,eAQtBP,kBAAkBS,UAAUC,KAAO,SAAUT,QAE3B,aAAVA,OADOO,KAEFG,cAFEH,KAIFI,sBAKbZ,kBAAkBS,UAAUE,YAAc,eAClCE,KAAOL,KAEXZ,EAAE,2BAA2BkB,GAAG,mCAAmC,WAC/DD,KAAKE,8BAGTnB,EAAE,2BAA2BoB,OAAM,WAC/BpB,EAAEY,MAAMS,QAAQ,uCAIxBjB,kBAAkBS,UAAUM,yBAA2B,eAE7CV,SADKG,KACWH,SAChBE,OAFKC,KAESD,OAGpBX,EAAE,0CAA0CsB,WAAW,UACvDtB,EAAE,yCAAyCuB,SAC3CvB,EAAE,yCAAyCuB,SAE3CtB,KAAKuB,KAAK,CAAC,CACPC,WAAY,sDACZC,KAAM,CACFjB,SAAUA,SACVE,OAAQA,QAGZgB,KAAM,SAAUC,cACNC,WAAaD,SAASE,KAE5B9B,EAAE,0CAA0C+B,KAAK,UAAU,GAC3D/B,EAAE,0CAA0CgC,YAAYH,aAG5DI,KAAM,SAAUC,QACZhC,IAAIiC,MAAM,sFACVjC,IAAIkC,MAAMF,QACVlC,EAAE,0CAA0CgC,YAAY,+EAMpE5B,kBAAkBS,UAAUG,mBAAqB,eACvCC,KAAOL,KACPyB,OAAS9B,SAAS+B,cAAc,cAAc5B,aAAa,eAC3DC,OAASJ,SAAS+B,cAAc,iBAAiB5B,aAAa,eAGpEH,SAAS+B,cAAc,wBAAwBC,kBAAkBC,MAAMC,QAAU,OAGjFxC,KAAKuB,KAAK,CAAC,CACPC,WAAY,0CACZC,KAAM,CACFW,OAAQA,OACR1B,OAAQA,QAGZgB,KAAM,SAAUC,cACNC,WAAaD,SAASc,OAC5BxC,IAAIkC,MAAMP,YACV3B,IAAIkC,MAAMnB,MACVA,KAAK0B,wBAAwBd,aAIjCI,KAAM,SAAUC,QACZhC,IAAIkC,MAAMF,QAGV3B,SAAS+B,cAAc,wBAAwBC,kBAAkBC,MAAMC,QAAU,OACjFzC,EAAE,mCAAmCgC,YAAY,+HAM7D5B,kBAAkBS,UAAU8B,wBAA0B,SAAUC,aACtDC,IAAMtC,SAASC,eAAe,uBAE/BqC,aAICH,OAASI,KAAKC,MAAMH,SACpBI,KAAO,GACPC,OAAS,GAENC,EAAI,EAAGA,EAAIR,OAAOS,OAAQD,IAE/BD,OAAOG,oBAAaV,OAAOQ,GAAGG,eAC9BL,KAAKI,KAAKV,OAAOQ,GAAGI,6BAIlBC,OAAS,CACXC,KAAM,MACNR,KAAM,CACFC,OAAQA,OACRQ,SAAU,CAAC,CACPC,MAAO,OACPC,QAAS,GACTC,YAAa,EACbC,aAAc,EACdC,eAAe,EACfC,YAAa,UACbC,gBAAiB,UACjBhB,KAAMA,KACNiB,gBAAiB,KAIzBC,QAAS,CACLC,YAAY,EACZC,qBAAqB,EACrBC,OAAQ,CACJC,EAAG,CACCC,aAAc,IACdC,IAAK,IAGbC,QAAS,CACLC,QAAS,CACLC,UAAW,CACPjB,MAAO,SAAUkB,gBACbC,EAAEC,IAAIF,mBACIA,QAAQG,OAAOT,cAUlD/D,SAAS+B,cAAc,wBAAwBC,kBAAkBC,MAAMC,QAAU,OAChE,IAAItC,MAAM0C,IAAKU,UAM5B,CACHyB,cAxLU3E,QACVH,IAAIkC,MAAM,wDACI,IAAIhC,kBAAkBC,QAC5BS,KAAKT"}